import logging
import httpx

from aiogram import Router, html, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from src.bot.config import FASTAPI_URL
from src.bot.handlers import keyboard as kb

from src.db import crud
from src.db.database import init_db, SessionLocal


router = Router()

init_db()


@router.message(CommandStart())
async def command_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "Anonymous"
    fullname = message.from_user.full_name

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{FASTAPI_URL}operations/users",
                json={"user_id": user_id, "username": username},
            )

            if response.status_code == 200:
                data = response.json()
                logging.info(f"User created: {data}")
            elif response.status_code == 400:
                logging.warning(f"User already exist: {user_id} {username}")
            else:
                logging.error(
                    f"Unexpected response: {response.status_code} {response.json()}"
                )

    except Exception as e:
        logging.error(f"Error while creating user: {e}")
        await message.reply(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)",
            reply_markup=kb.main,
        )
        return

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(fullname)}! –Ø –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á.\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=kb.main,
    )


@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
async def get_user_task(message: Message):
    user_id = message.from_user.id
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{FASTAPI_URL}operations/tasks/{user_id}")

            if response.status_code == 200:
                data = response.json()

                if not data:
                    await message.reply("–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–¥–∞—á")
                else:
                    task_list = "\n\n".join(
                        [
                            f"üîπ {html.bold('ID')}: {task['id']}\n"
                            f"{html.bold('–ù–∞–∑–≤–∞–Ω–∏–µ')}: {html.bold(task['task_name'])}\n"
                            f"{html.bold('–û–ø–∏—Å–∞–Ω–∏–µ')}: {task['description']}\n"
                            f"{html.bold('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')}: {task['date']}\n"
                            f"{html.bold('–°—Ç–∞—Ç—É—Å')}: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ' if task['is_done'] else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚ùå'}"
                            for task in data
                        ]
                    )

                    await message.reply(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n{task_list}")
            else:
                await message.reply(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    except Exception as e:
        logging.error(f"Error while fetching tasks: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
